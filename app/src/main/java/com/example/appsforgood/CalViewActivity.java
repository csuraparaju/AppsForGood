package com.example.appsforgood;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.model.Event;

import java.time.Instant;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

import schedulingBackEnd.AvailableTimeFinder;
import schedulingBackEnd.ParcelableEvent;
import uiBackEnd.EventCardAdapter;
import uiBackEnd.RecyclerViewData;

/**
 * An {@link AppCompatActivity} that shows the user the events on their schedule from a selected
 * date and the suggested exercise times for that event.
 *
 * @see AppCompatActivity
 * @author Christopher Walsh
 */
public class CalViewActivity extends AppCompatActivity {
    public static final int ADD_NOTE_REQUEST_CODE = 1;

    /**
     * An {@link EventCardAdapter} that stores and manages all of the event cards in this activity's
     * {@link RecyclerView}.
     */
    EventCardAdapter adapter;

    /**
     * A list of {@link ModifiedEvent}s that will be added to the user's Google Calendar once {@link #close()}
     * is called.
     */
    List<ModifiedEvent> newEvents;

    /**
     * Runs on activity start to find and display suggested exercise times along with the actual
     * events in the user's calendar in a {@link RecyclerView}. The method also provides each of the
     * suggested events in the {@link RecyclerView} with an {@link EventCardAdapter.OnCardClickListener}
     * that starts the {@link AddNoteActivity} in order to convert the suggested time slot to a new
     * event which is then added to {@link #newEvents}. This method creates a menu for the activity
     * and sets the events title.
     *
     * @param savedInstanceState
     */
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.calendar_viewer);

        Bundle extras = getIntent().getExtras();
        List<ParcelableEvent> collectedEventList = extras.getParcelableArrayList("events");
        List<ModifiedEvent> eventList = ModifiedEvent.convertParcelableList(collectedEventList);
        int exDuration = extras.getInt("exDuration");
        long wakeUpTime = extras.getLong("wakeUpTime");
        long sleepTime = extras.getLong("sleepTime");

        setTitle(createTitle(wakeUpTime));

        RecyclerViewData recyclerViewData =
                new AvailableTimeFinder(eventList, exDuration, wakeUpTime, sleepTime)
                        .getAvailableSlots();

        for(int i=0; i<recyclerViewData.size(); i++){
            Log.d("TestLogs", recyclerViewData.getEvent(i).getStartAsString());
        }

        Log.d("TestLogs","From Google.DateTime: "+ new DateTime(0).toStringRfc3339());
        Log.d("TestLogs","From ModifiedEvent: "+ new ModifiedEvent("a",0,0).getStartAsString());

        RecyclerView recyclerView = findViewById(R.id.recycler_view);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setHasFixedSize(true);

        adapter = new EventCardAdapter();
        recyclerView.setAdapter(adapter);

        adapter.setEvents(recyclerViewData);
        adapter.setOnCardClickListener(new EventCardAdapter.OnCardClickListener() {
            @Override
            public void onCardClick(ModifiedEvent event, int index) {
                Intent intent = new Intent(CalViewActivity.this, AddNoteActivity.class);
                intent.putExtra("possibleEvent", event.toParcelableEvent());
                intent.putExtra("exerciseTime", exDuration);
                intent.putExtra("index", index);
                intent.putExtra("date", createTitle(wakeUpTime));
                startActivityForResult(intent, ADD_NOTE_REQUEST_CODE);
            }
        });

        newEvents = new ArrayList<ModifiedEvent>();
    }

    /**
     * Collects the events created by {@link AddNoteActivity}s generated by the
     * {@link EventCardAdapter.OnCardClickListener}s
     *
     * @param requestCode
     * @param resultCode
     * @param data
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode != RESULT_OK){
            return;
        }

        switch (requestCode){
            case ADD_NOTE_REQUEST_CODE:
                ModifiedEvent newEvent = new ModifiedEvent((ParcelableEvent) data.getParcelableExtra("event"));
                int index = data.getIntExtra("index", -1);
                adapter.replaceEvent(newEvent, true, index);
                newEvents.add(newEvent);
        }
    }

    /**
     * Adds a save button to the created menu.
     * @param menu
     * @return
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.add_event_menu, menu);
        return true;
    }

    /**
     * Handles clicks on menu buttons, namely the save button.
     * @param item
     * @return
     */
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        switch (item.getItemId()){
            case R.id.save_event:
                close();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Closes the activity and provides the {@link MainActivity} with the new events created in this
     * activity.
     * @see MainActivity#onActivityResult(int, int, Intent)
     */
    public void close(){
        Intent data = new Intent();
        data.putParcelableArrayListExtra("newEvents", ModifiedEvent.convertToParcelableList(newEvents));
        setResult(RESULT_OK, data);
        finish();
    }

    /**
     * Generates a title for the event, using the provided wakeUpTime to find the date in
     * (M)M/(d)d/YYYY format.
     *
     * @param wakeUpTime The wake up time (in millis since epoch) provided for the current date
     * @return
     */
    public String createTitle(long wakeUpTime){
        Instant instant = Instant.ofEpochMilli(wakeUpTime);
        int day = instant.atZone(ZoneId.systemDefault()).getDayOfMonth();
        int month = instant.atZone(ZoneId.systemDefault()).getMonthValue();
        int year = instant.atZone(ZoneId.systemDefault()).getYear();

        return month+"/"+day+"/"+year;
    }
}
